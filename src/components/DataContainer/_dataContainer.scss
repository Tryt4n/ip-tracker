@use "../../abstracts/mixins" as *;
@use "../../abstracts/colors" as c;
@use "../../abstracts/variables" as v;
@use "../../base/functions" as func;

.data-container {
  position: absolute;
  bottom: 0;
  left: 50%;
  translate: -50% 50%;
  z-index: 999;
  width: min(func.rem(1500), 90%);
  margin-inline: auto;
  padding: v.$data-information-font-size;
  border-radius: v.$border-radius;
  background: white;
  @include flex(row, flex-start, stretch);
  gap: 1rem;
  text-align: start;
  @media (width <= func.rem(768)) {
    @include flex(column);
    text-align: center;
    translate: -50% 60%;
  }

  &__article {
    position: relative;
    @include flex(column, flex-start);
    width: 100%;
    margin-right: 1.5rem;
    @media (width > func.rem(768)) {
      &:not(:first-child) {
        padding-left: 1rem;
      }
      &:not(:first-child):before {
        content: "";
        position: absolute;
        height: 80%;
        translate: 0 10%;
        width: 1px;
        background: c.$dark-gray;
        left: 0;
      }
    }
  }

  &__header {
    font-size: calc(v.$data-information-font-size * (2 / 3));
    font-weight: 400;
    text-transform: uppercase;
    color: c.$dark-gray;
    margin-bottom: 0.5rem;
    @media (width < func.rem(1000)) {
      font-size: calc((v.$data-information-font-size * (2 / 3)) * 0.9);
    }
    @media (width < func.rem(500)) {
      font-size: calc((v.$data-information-font-size * (2 / 3)) * 0.75);
    }
  }

  &__output {
    font-size: v.$data-information-font-size;
    line-height: calc(v.$data-information-font-size * 1.17);
    color: c.$very-dark-gray;
    @media (width < func.rem(1000)) {
      font-size: calc(v.$data-information-font-size * 0.75);
    }
    @media (width < func.rem(375)) {
      font-size: calc(v.$data-information-font-size * (2 / 3));
    }
  }
}

.text-loading-container {
  @include flex(row, flex-start, flex-end);
  gap: 0.25em;
  @media (width <= func.rem(768)) {
    justify-content: center;
  }

  .dot {
    width: calc(v.$data-information-font-size * 0.25);
    height: calc(v.$data-information-font-size * 0.25);
    background: c.$very-dark-gray;
    border-radius: 50%;
    translate: 0 -50%;
    @media (width < func.rem(1000)) {
      height: calc((v.$data-information-font-size * 0.75) * 0.25);
      width: calc((v.$data-information-font-size * 0.75) * 0.25);
      translate: 0 -125%;
    }
    @media (width < func.rem(375)) {
      height: calc((v.$data-information-font-size * (2 / 3)) * 0.25);
      width: calc((v.$data-information-font-size * (2 / 3)) * 0.25);
      translate: 0 -175%;
    }
    &:first-of-type {
      animation: pulse 2s ease-in-out infinite;
    }
    &:nth-of-type(2) {
      animation: pulse 2s ease-in-out 500ms infinite;
    }
    &:last-of-type {
      animation: pulse 2s ease-in-out 1000ms infinite;
    }
  }
}

@keyframes pulse {
  0% {
    opacity: 0;
  }
  50% {
    opacity: 1;
  }
  100% {
    opacity: 0;
  }
}
